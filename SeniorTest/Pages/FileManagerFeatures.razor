@page "/filemanager-features"
@using Syncfusion.Blazor.FileManager
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@inject ILocalStorageService LocalStorage
@inject IConfiguration Config

<h2>File Manager</h2>
<br/>
@inject IJSRuntime JsRuntime;
<div id = "ControlRegion">
<SfFileManager TValue="FileManagerDirectoryContent" ShowThumbnail="true" AllowDragAndDrop="true" AllowMultiSelection="true" >
    <FileManagerAjaxSettings Url="@_fileOperations"
                             UploadUrl="@_upload"
                             DownloadUrl="@_download"
                             GetImageUrl="@_getImage">
    </FileManagerAjaxSettings>
    <FileManagerEvents TValue="FileManagerDirectoryContent" 
                       OnSend="FileManagerBeforeSendEvent" 
                       BeforeDownload="FileManagerBeforeDownloadEvent"
                       BeforeImageLoad="FileManagerBeforeGetImageEvent"></FileManagerEvents>
</SfFileManager>
</div>
<br/>
<div>
  <h3>Selected Features:</h3>
    <ul class="ulstyle">
      <li class="list"> Thumbnail</li>
      <li class="list"> Drag and Drop</li>
      <li class="list"> Multiple Selection</li>
      <li class="list"> Theme - Bootstrap v5</li>
    </ul>
</div>
<br/>

@code {
    private async void FileManagerBeforeSendEvent(BeforeSendEventArgs obj)
    {
        // if (!obj.HttpClientInstance.DefaultRequestHeaders.Contains("Access-Control-Allow-Origins"))
        //      obj.HttpClientInstance.DefaultRequestHeaders.Add("Access-Control-Allow-Origins", new []{"https://localhost*"});
        //  if (!obj.HttpClientInstance.DefaultRequestHeaders.Contains("Access-Control-Allow-Headers"))
        //      // obj.HttpClientInstance.DefaultRequestHeaders.Add("Access-Control-Allow-Headers", new []{"*"});
        //      obj.HttpClientInstance.DefaultRequestHeaders.Add("Access-Control-Allow-Headers", 
        //          new []{"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With, Origin,Accept,Access-Control-Request-Method, Access-Control-Request-Headers"});
        //  if (!obj.HttpClientInstance.DefaultRequestHeaders.Contains("Access-Control-Allow-Methods"))
        //      obj.HttpClientInstance.DefaultRequestHeaders.Add("Access-Control-Allow-Methods", new []{"*"});
        if (!obj.HttpClientInstance.DefaultRequestHeaders.Contains("Authorization"))
            obj.HttpClientInstance.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", _token);
        //
        // switch (obj.Action)
        // {
        //     case "Upload":
        //         obj.HttpClientInstance.DefaultRequestHeaders.Remove("Authorization");
        //         //obj.HttpClientInstance.DefaultRequestHeaders.Remove("Access-Control-Allow-Origins");
        //         break;
        // }
    }

    private string _remoteUrl;
    private string _fileOperations;
    private string _upload;
    private string _download;
    private string _getImage;
    private string? _token;
    
    protected override async Task OnInitializedAsync()
    {
        _remoteUrl = ""; //Config["BaseUrlApi"];
        _fileOperations = $"{_remoteUrl}/api/FileManager/FileOperations";
        _upload =   $"{_remoteUrl}/api/FileManager/Upload";
        _download = $"{_remoteUrl}/api/FileManager/Download";
        _getImage = $"{_remoteUrl}/api/FileManager/GetImage";
        
        _token = await LocalStorage.GetItemAsync<string>("authToken") ?? null;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private void FileManagerBeforeDownloadEvent(BeforeDownloadEventArgs<FileManagerDirectoryContent> obj)
    {
     
    
    //throw new NotImplementedException();
        // if (!obj.HttpClientInstance.DefaultRequestHeaders.Contains("Authorization"))
            // obj.HttpClientInstance.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", _token);
    }

    private void FileManagerBeforeGetImageEvent(BeforeImageLoadEventArgs<FileManagerDirectoryContent> obj)
    {
        // throw new NotImplementedException();
        // obj.
    }

}

<style>
    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }
    .list {
    float: left;
    line-height: 20px;
    margin: 10px;
    min-width: 200px;
    }
</style>
